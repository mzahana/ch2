#!/usr/bin/env python
import time
import rospy
import roslib 
import numpy as np
import cv2
import actionlib

from std_msgs.msg import *
from control_msgs.msg import *
from trajectory_msgs.msg import *
from sensor_msgs.msg import *
from actionlib_msgs.msg import *
from math import *

import ur5Lib
ur5Lib.setParams()

# dummy = rospy.wait_for_message('/joint_states',JointState)

def main():

    ####### Initializations

    rospy.init_node('alpha', anonymous=True)

    sm = ur5Lib.ur5Class()

    print "Waiting for actionLib server..."
    sm.client.wait_for_server()
    print "Connected to server."
    sm.client.cancel_all_goals()

    rate = rospy.Rate(rospy.get_param('/ur5/fbRate'))


    ######
    while False:
        #Q =  sm.jointPosition
        #t = sm.jointTime - rospy.Time.now()
        #print "A:", Q[0], Q[1], Q[2], t.to_sec()
        Qz, Tz = sm.getJoints()
        t = Tz - rospy.Time.now()
        print "B:", Qz[0], Qz[1], Qz[2], t.to_sec()
        # time.sleep(0.01)
    #######

    dwellTime = 5.0
    velocity = 100.0

    if rospy.get_param('/ur5/onHusky'):
        dwellTime = 15.0
        velocity = 25.0

    time.sleep(1.0)
    print "Wake up..."
    sm.jointGoto(rospy.get_param('/ur5/poseWakeup'),dwellTime)
    sm.client.wait_for_result()

    print "Get ready..."
    sm.jointGoto(rospy.get_param('/ur5/poseReady'),dwellTime)
    sm.client.wait_for_result()

    cv2.namedWindow('keystrokes go here...')

    while not rospy.is_shutdown():
        x,y,z = sm.wristFK(sm.jointPosition[0],sm.jointPosition[1],sm.jointPosition[2])
        print "Current: ", x, y, z
        print "Enter desired xyz:"
        XYZ = raw_input()
        xyz = list(map(float, XYZ.split()))
        x = xyz[0]
        y = xyz[1]
        z = xyz[2]
        print "Setpoint: ", x, y, z
        flag = sm.xyzGoto(x,y,z,velocity)
        if flag == False:
            print "Out of bounds, retry..."
        else:
            print "Enroute..."
            Moving = True
            Enroute = True
            while Enroute:
                Q =  sm.jointPosition
                t = sm.jointTime - rospy.Time.now()
                print "A:", Q[0], Q[1], Q[2], t.to_sec()
                Qz, Tz = sm.getJoints()
                t = Tz - rospy.Time.now()
                print "B:", Qz[0], Qz[1], Qz[2], t.to_sec()
                c = cv2.waitKey(1)
                if c != -1:
                    if Moving:
                        print "STOPPING!!!"
                        sm.cancel()
                        Moving = False
                    else:
                        print "STARTING!!!"
                        flag = sm.xyzGoto(x,y,z,velocity)
                        Moving = True

                xNow,yNow,zNow = sm.wristFK(sm.jointPosition[0],sm.jointPosition[1],sm.jointPosition[2])
                error = sqrt( (x - xNow)**2 + (y - yNow)**2 + (z - zNow)**2 )
                # status = sm.client.get_state()
                if error < 1.0:
                    Enroute = False
                    print "Arrived: ", xNow, yNow, zNow
                    print "Offset: ", xNow-81.0, yNow, zNow+95.6
                    Q =  sm.jointPosition
                    t = sm.jointTime - rospy.Time.now()
                    print "A:", Q[0], Q[1], Q[2], t.to_sec()
                    Qz, Tz = sm.getJoints()
                    t = Tz - rospy.Time.now()
                    print "B:", Qz[0], Qz[1], Qz[2], t.to_sec()
                
if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass

